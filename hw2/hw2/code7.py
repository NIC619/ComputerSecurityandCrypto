import base64, hashlib
import random, string
import hmac
import math
from Crypto.Cipher import AES
from Crypto.PublicKey import RSA
from pwn import *
import itertools

def prime_factors(n):
    i = 2
    factors = []
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

def Solution():
	
	modu = '25:b1:8b:f5:f3:89:09:7d:17:23:78:66:bb:51:cf:f8:de:92:24:53:74:9e:bc:40:3b:09:95:c9:7c:0e:38:6d:46:c1:61:ca:df:f7:7c:69:86:0d:ae:47:91:c2:14:cf:84:87:aa:aa:9f:26:e9:20:a9:77:83:49:06:03:8a:ef:b5:c3:08:27:df:cf:3f:c9:e9:76:95:44:f9:4e:07:cd:fe:08:72:03:9a:3a:62:62:11:66:78:b2:61:fb:2d:6b:9d:32:53:9e:92:a1:53:b3:67:56:29:ba:b3:94:2e:7d:35:e3:0f:7e:ef:5a:bf:1c:50:d7:97:d0:cc:88:e1:bd:cc:fd:1a:12:ea:6f:7e:f7:5c:37:27:db:df:2e:78:0f:34:28:ae:8f:7a:4f:b7:a8:9f:18:4a:36:50:32:b1:53:f8:42:5e:84:57:50:eb:2b:7a:bc:02:dc:15:ce:02:07:50:7a:a9:50:86:3b:b8:48:0a:78:02:8d:d6:29:79:94:4d:6c:63:3f:af:a1:03:e4:db:28:ce:87:f5:a0:c6:ed:4a:2f:26:64:42:7f:56:5c:77:81:ab:61:91:45:6d:97:1c:7f:fa:39:52:72:37:4c:ec:01:55:e5:f9:11:89:db:74:2e:4c:28:b0:3a:0f:a1:1c:ff:b0:31:73:d2:a4:cc:e6:ae:53'
	#print modu
	modu = ''.join(modu.split(":"))
	#print modu
	modu = int(modu, 16)
	#print modu
	p = 3133337
	q = 25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939
	#pq_congruence = 
	r = (p-1)*(q-1)
	#print p*q
	#print r*15+1
	#for i in range(10000):
	#	if((r*i)+1)%65537==0:
	#		print ((r*i)+1)/65537
	#d = congruence(65537, r)
	d = 406853230956379689450620815713768871010712825839536410687962650677800895818003893712259622281477453292088146173840036827322518131453630576229976208523593618949818777897059256426591560532784635697190752924923710375949616954069804342573867253630978123632384795587951365482103468722384133084798614863870775897915929475258974188300927376911833763105616386167881813301748585233563049693794370642976326692672223638908164822104832415788577945314264232531947860576966629150456995512932232264881080618006698700677529111454508900582785420549466798020451488168615035256292977390692401388790460066327347700109341639992159475755036449
	#base = int(q/p)
	#q2 =  q%p
	#for i in range(10000000):
	#	if((p*i)+1)%q2==0:
	#		print ((p*i)+1)/q2
	#		break;
	#print (3025913*q)%p
	f1 = open('pwd.enc','r')
	flag = f1.read()
	f1.close()
	dec =  base64.b64decode(flag)
	f = open('flag2', 'w')
	f.write(dec)
	f.close()
	#pswd = raw_input('input password: ')
	f2 = open('pswd.bin', 'rb')
	pswd = f2.read()
	#print 
	pswd = pswd.translate(None, '\x00')
	f2.close()
	conn = remote('soc12.csie.ntu.edu.tw', 20200)
	rcv = conn.recv()
	#print rcv
	conn.send('CatFace\n')
	rcv = conn.recv()
	#print rcv
	conn.send(pswd)
	rcv = conn.recv()
	#print rcv
	conn.send('2\n')
	rcv = conn.recv()
	print rcv
if __name__ == '__main__':
	Solution()